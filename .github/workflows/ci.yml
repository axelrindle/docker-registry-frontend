name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: axelrindle/docker-registry-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:5
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - "$GITHUB_WORKSPACE/docker/example/registry-config.yml:/etc/docker/registry/config.yml"

    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        id: cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Run tests
        run: npm run test
      - name: Codacy Coverage Reporter
        uses: codacy/codacy-coverage-reporter-action@v1.3.0
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: coverage/lcov.info

  build:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      id: cache
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
    - name: Use Node.js 16
      uses: actions/setup-node@v3
      with:
        node-version: 16
        cache: 'npm'
    - run: npm ci
      if: steps.cache.outputs.cache-hit != 'true'
    - name: Calculate version string
      id: calculate-version-string
      run: docker/version.sh ${{ github.event_name }} ${{ github.ref_name }} ${{ github.sha }}
    - run: npm run build
      env:
        VERSION: ${{ steps.calculate-version-string.outputs.version }}
    - name: Upload files as artifact
      uses: actions/upload-artifact@v3
      with:
        name: build
        path: build/
        retention-days: 1
        if-no-files-found: error

  docker:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download artifact files
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build/

      - name: Docker Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=true
          tags: |
            type=ref,event=tag
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/arm/v7,linux/arm64/v8,linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
